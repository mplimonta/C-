void main(void) {
    int i;
    int process[4];
    int states[4];
    int count;
    int resposta;
    while(1 == 1){
        resposta = input();
        if(resposta == 0){
            setQuantum(10000);
        }else{
            setQuantum(0);
        }
        changeOffset(288,427*4);
        clearMemory();
        setProcessLine(427*4);
        changeOffset(0,0);
        changeOffset(576,492*4);
        clearMemory();
        setProcessLine(492*4);
        changeOffset(0,0);
        changeOffset(864,557*4);
        clearMemory();
        setProcessLine(557*4);
        changeOffset(0,0);
        changeOffset(1152,576*4);
        clearMemory();
        setProcessLine(576*4);
        changeOffset(0,0);
        process[0] = 427 * 4;
        process[1] = 492 * 4;
        process[2] = 557 * 4;
        process[3] = 576 * 4;
        i = 0;
        states[0] = 1;
        states[1] = 1;
        states[2] = 1;
        states[3] = 1;
        count = 0;
        while(count < 5){
            if(states[i] != 0){
                count = 0;
                SaveRegs();
                changeOffset(288 * (i+1), process[i]);
                LoadRegs();
                changeROM();
                NextLineTBE();
                SaveRegs();
                changeOffset(0,0);
                LoadRegs();
                states[i] = ProcessCheck();
            }else{
                count = count + 1;
            }
            if(i == 3){
                i = 0;
            }else{
                i = i + 1;
            }
        }
        output(25252);
    }
}

/* MAIOR */
/*
void main(void) {
    int i;
    int processes[5];
    int maior;
    maior = 0;
    i = 0;
    processes[0] = input();
    processes[1] = input();
    processes[2] = input();
    processes[3] = input();
    processes[4] = input();
    while(i < 5){
        if(processes[i] > maior){
            maior = processes[i];
        }
        i = i + 1;
    }
    output(maior);
}
*/
/* FIBONACCI */
/*
int fib(int n)
{
    int a; int b; int c; int i;
    a = 0;
    b = 1;
    i = 2; 
    if (n == 0) {
        return a;
    } while (i <= n) {
        c = a + b;
        a = b;
        b = c;
        i = i + 1;
    }
    return b;
}
void main(void)
{
    int n;
    n = input();
    output(fib(n));
}
*/

/* SOMA */
/*
void main(void)
{	int x; int y; int z;
	x = input();
    y = input();
    z = x + y;
	output(z);
}*/


/* Fatorial */
/*
void main(void) {
    int n;
    int resultado;
    resultado = 1;
    n = input();
    while(n != 0){
        resultado = resultado * n;
        n = n - 1;
    }
    output(resultado);
}
*/